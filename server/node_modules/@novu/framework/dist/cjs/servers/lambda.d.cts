import * as aws_lambda from 'aws-lambda';
import { APIGatewayProxyEventV2, APIGatewayProxyResult } from 'aws-lambda';
import { S as ServeHandlerOptions } from '../index-zc5nCCz_.cjs';
export { C as Client, N as NovuRequestHandler, w as workflow } from '../index-zc5nCCz_.cjs';
import { E as Either } from '../health-check.types-DjxZf7gi.cjs';
export { C as CronExpression, W as Workflow } from '../health-check.types-DjxZf7gi.cjs';
import { S as SupportedFrameworkName } from '../server.types-BRWsA1CA.cjs';
import '@novu/shared';
import 'json-schema-to-ts';
import 'zod';

declare const frameworkName: SupportedFrameworkName;
/**
 * With AWS Lambda, serve and register any declared workflows with Novu,
 * making them available to be triggered by events.
 *
 * @example
 *
 * ```ts
 * import { serve } from "@novu/framework/lambda";
 * import { myWorkflow } from "./src/novu/workflows";
 *
 * export const handler = serve({ workflows: [myWorkflow] });
 * ```
 */
declare const serve: (options: ServeHandlerOptions) => (event: Either<aws_lambda.APIGatewayProxyEvent, APIGatewayProxyEventV2>) => Promise<Promise<APIGatewayProxyResult>>;

export { ServeHandlerOptions, frameworkName, serve };
